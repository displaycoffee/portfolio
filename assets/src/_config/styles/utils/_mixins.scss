// Use utils and theme variables
@use './_functions';
@use '../theme/_theme';

// Use sass:map to get values from $exported map
@use "sass:map";

// Animate
// Example for $value: ss-spin 2s infinite linear
@mixin animate($value) {
	-webkit-animation: $value;
	-moz-animation: $value;
	animation: $value;
}

// Animate - spin
// Example: use when animating icons with the animate mixin
@mixin animate-spin {
	@keyframes ss-spin {
		0% {
			@include transform(rotate(0deg));
		}
		to {
			@include transform(rotate(1turn));
		}
	}
}

// Animate - loading
@mixin animate-loading {
	@keyframes loading {
		from {
			left: -200px;
			width: 30%;
		}
		50% {
			width: 30%;
		}
		70% {
			width: 70%;
		}
		80% {
			left: 50%;
		}
		95% {
			left: 120%;
		}
		to {
			left: 100%;
		}
	}
}

// Border radius with browser prefixes
@mixin border-radius($size) {
	-moz-border-radius: $size;
	border-radius: $size;
}

// Clearfix
@mixin clearfix($selector) {
	#{$selector}:before, #{$selector}:after {
		content: '';
		display: table;
	}
	#{$selector}:after {
		clear: both;
		zoom: 1;
	}
}

// Set text overflow with ellipsis
@mixin ellipsis {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// Set flex property
// $value: grow shrink basis
// grow    : 1 0 auto
// base    : 1 1 0%
// full    : 1 1 100%
// max     : 0 0 auto
// adapt   : 1 1 auto
// default : 0 1 auto
@mixin flex($value: '') {
	$var-value: if($value != '', $value, 1 1 0%);
	-webkit-flex: $var-value;
	-ms-flex: $var-value;
	-moz-flex: $var-value;
	flex: $var-value;
}

// Styles for flex child
@mixin flex-child($property, $value) {
	@if $property == 'order' {
		-webkit-order: $value;
		-ms-order: $value;
		order: $value;
	} @else if $property == 'align-self' {
		-webkit-align-self: $value;
		align-self: $value;
	}
}

// Flex flow (for overrides)
@mixin flex-direction($direction) {
	-webkit-flex-direction: $direction;
	-ms-flex-direction: $direction;
	-moz-flex-direction: $direction;
	flex-direction: $direction;	
}

// Flex display
// $type: inline or leave blank
@mixin flex-display($type: '') {
	$var-type: if($type != '', $type, flex);
	display: -webkit-#{$var-type};
	display: -ms-#{$var-type};
	display: -moz-#{$var-type};
	display: #{$var-type};
}

// Flex flow
// $flow: row/column wrap/nowrap
@mixin flex-flow($flow: '') {
	$var-flow: if($flow != '', $flow, row wrap);
	-webkit-flex-flow: $var-flow;
	flex-flow: $var-flow;
}

// Aligns a flex icon
@mixin flex-icon-align($align) {
	@if $align == right {
		margin-left: auto;
		order: 2;
	} @else if $align == left or $align == center {
		order: -2;
	}
}

// Flex layout - sass map of flex properties / values
// Example: @include mixins.flex-layout((flex-flow: row nowrap, align-items: center)) or @include mixins.flex-layout
// If map is not defined, defaults to display: flex and flex-flow: row wrap 
@mixin flex-layout($map: ()) {
	$flow: map.get($map, 'flex-flow');
	@if $flow {
		@include flex-flow($flow);
	} @else {
		@include flex-flow;
	}
	$display: map.get($map, 'display');
	@if $display == flex or $display == inline-flex {
		@include flex-display($display);
	} @else {
		@include flex-display;
	}
	@each $name, $value in $map {
		@if $name == align-content or $name == align-items or $name == justify-content {
			@include flex-parent($name, $value);
		}
	}
}

// Styles for flex parent
@mixin flex-parent($property, $value) {
	@if $property == 'justify-content' {
		-webkit-justify-content: $value;
		justify-content: $value;
	} @else if $property == 'align-items' {
		-webkit-align-items: $value;
		align-items: $value;
	} @else if $property == 'align-content' {
		-webkit-align-content: $value;
		align-content: $value;
	}
}

// Acts as a spacer for flex alignment
@mixin flex-spacer-align($align, $spacing) {
	@include flex(0 0 auto);
	content: '';
	@include sizing($spacing, 1px);
	@if $align == left or $align == center {
		order: -1;
	}
}

// Flex wrap (for overrides)
@mixin flex-wrap($wrap) {
	-webkit-flex-wrap: $wrap;
	flex-wrap: $wrap;	
}

// For setting bottom padding as height
@mixin fluid-sizing($bottom: '') {
	@if $bottom != '' {
		height: 0;
		padding-bottom: $bottom;
		overflow: hidden;
	}
}

// For setting font faces
@mixin font-face($name, $path, $file-name, $weight : normal, $style: normal) {
	@font-face {
		font-family: $name;
		src: url($path + $file-name + '.woff2') format('woff2'),
			url($path + $file-name + '.woff') format('woff'),
			url($path + $file-name + '.ttf') format('truetype');
		font-weight: $weight;
		font-style: $style;
		font-display: block;
	}
}

// Basic linear gradient
@mixin gradient($color-01, $color-02, $direction-01, $direction-02) {
	background-color: $color-01;
	background-image: -webkit-linear-gradient($direction-02, $color-01, $color-02);
	background-image: -o-linear-gradient($direction-02, $color-01, $color-02);
	background-image: -moz-linear-gradient($direction-02, $color-01, $color-02);
	background-image: linear-gradient($direction-01, $color-01, $color-02);
}

// Gradient - generate strips for gradients
@mixin gradient-stripes($map) {
	// variables for calculating colors for gradients
	$length: length($map);
	$divider: calc(100 / $length);
	$separator: ',';

	// gradients string
	$gradients: '';
	$gradients-fallback: '';

	// loop through colors and process gradient rule
	@each $color in $map {
		$index: index($map, $color) - 1;
		$percentage: if($index == 0, calc(($index + 1) * $divider), calc($index * $divider));
		@if ($index == 0) {
			$gradients: $gradients + ($color calc($percentage * 1%));
			$gradients-fallback: $color;
		} @else {
			$first-color: $separator $color calc($percentage * 1%);
			$second-color: if($index == $length - 1, ($separator $color), ($separator $color calc(($percentage + $divider) * 1%)));
			$gradients: $gradients + #{$first-color} + #{$second-color};
		}
	}

	// css rules
	background-color: $gradients-fallback;
	background-image: -webkit-linear-gradient(#{$gradients});
	background-image: -o-linear-gradient(#{$gradients});
	background-image: -moz-linear-gradient(#{$gradients});
	background-image: linear-gradient(#{$gradients});
}

// Inline block with vertical alignment
@mixin grid-columns($width) {
	-ms-grid-columns: repeat(auto-fill, minmax($width, 1fr));
	grid-template-columns: repeat(auto-fill, minmax($width, 1fr));
}

// Inline block with vertical alignment
@mixin grid-layout($gap: 5px, $width) {
	display: -ms-grid;
	display: grid;
	@include grid-columns($width);
	-ms-grid-gap: $gap;
	grid-gap: $gap;
}

// Resize icons
@mixin icon-sizing($size) {
	@if $size != false {
		@include sizing($size, $size);
		line-height: $size;
	}
}

// Check if shared variables are set before setting css values
@mixin if-exists($map) {
	@each $name, $value in $map {
		@if $name != selector and ($name != '' and $value != false) {
			#{$name}: $value;
		}
	}
}

// Inline block with vertical alignment
@mixin inline-block($vertical-align) {
	display: inline-block;
	vertical-align: $vertical-align;
}

// Image base properties
@mixin image-base {
	max-width: 100%;
	max-height: 100%;
	@include sizing(auto, auto);
	border: 0;
	display: block;
}

// Line clamp settings
@mixin line-clamp($lines) {
	display: -webkit-box;
	-webkit-box-orient: vertical;
	overflow: hidden;
	-webkit-line-clamp: $lines;
}

// Image / object fit properties
@mixin object-fit($position, $fit) {
	-o-object-position: $position;
	object-position: $position;
	-o-object-fit: $fit;
	object-fit: $fit;
}

// Mixin for a pixel style border
@mixin pixel-border($width: 2px, $bg: #333333, $border: #111111, $inset: #222222, $highlight: #666666) {
	// Variables pixel borders
	$svg-xlmns: 'xmlns="http://www.w3.org/2000/svg"';
	$svg-viewbox: 'viewBox="0 0 30 30"';
	$svg-shape: 'shape-rendering="crispEdges"';

	// Variables for svg background images
	$top-left: functions.svg-encode('<svg #{$svg-xlmns} #{$svg-viewbox} #{$svg-shape}><path fill="#{$bg}" d="M0 0h3v3H0zM3 0h3v3H3zM6 0h3v3H6zM9 0h3v3H9zM12 0h3v3h-3z"/><path fill="#{$border}" d="M15 0h3v3h-3zM18 0h3v3h-3zM21 0h3v3h-3zM24 0h3v3h-3zM27 0h3v3h-3z"/><path fill="#{$bg}" d="M0 3h3v3H0zM3 3h3v3H3zM6 3h3v3H6z"/><path fill="#{$border}" d="M9 3h3v3H9zM12 3h3v3h-3z"/><path fill="#{$highlight}" d="M15 3h3v3h-3zM18 3h3v3h-3zM21 3h3v3h-3zM24 3h3v3h-3zM27 3h3v3h-3z"/><path fill="#{$bg}" d="M0 6h3v3H0zM3 6h3v3H3z"/><path fill="#{$border}" d="M6 6h3v3H6z"/><path fill="#{$highlight}" d="M9 6h3v3H9zM12 6h3v3h-3z"/><path fill="#{$bg}" d="M0 9h3v3H0z"/><path fill="#{$border}" d="M3 9h3v3H3z"/><path fill="#{$highlight}" d="M6 9h3v3H6z"/><path fill="#{$bg}" d="M0 12h3v3H0z"/><path fill="#{$border}" d="M3 12h3v3H3z"/><path fill="#{$highlight}" d="M6 12h3v3H6z"/><path fill="#{$border}" d="M0 15h3v3H0z"/><path fill="#{$highlight}" d="M3 15h3v3H3z"/><path fill="#{$border}" d="M0 18h3v3H0z"/><path fill="#{$highlight}" d="M3 18h3v3H3z"/><path fill="#{$border}" d="M0 21h3v3H0z"/><path fill="#{$highlight}" d="M3 21h3v3H3z"/><path fill="#{$border}" d="M0 24h3v3H0z"/><path fill="#{$highlight}" d="M3 24h3v3H3z"/><path fill="#{$border}" d="M0 27h3v3H0z"/><path fill="#{$highlight}" d="M3 27h3v3H3z"/></svg>');
	$top-right: functions.svg-encode('<svg #{$svg-xlmns} #{$svg-viewbox} #{$svg-shape}><path fill="#{$border}" d="M0 0h3v3H0zM3 0h3v3H3zM6 0h3v3H6zM9 0h3v3H9zM12 0h3v3h-3z"/><path fill="#{$bg}" d="M15 0h3v3h-3zM18 0h3v3h-3zM21 0h3v3h-3zM24 0h3v3h-3zM27 0h3v3h-3z"/><path fill="#{$highlight}" d="M0 3h3v3H0zM3 3h3v3H3zM6 3h3v3H6zM9 3h3v3H9zM12 3h3v3h-3z"/><path fill="#{$border}" d="M15 3h3v3h-3zM18 3h3v3h-3z"/><path fill="#{$bg}" d="M21 3h3v3h-3zM24 3h3v3h-3zM27 3h3v3h-3z"/><path fill="#{$highlight}" d="M15 6h3v3h-3zM18 6h3v3h-3z"/><path fill="#{$border}" d="M21 6h3v3h-3z"/><path fill="#{$bg}" d="M24 6h3v3h-3zM27 6h3v3h-3z"/><path fill="#{$highlight}" d="M21 9h3v3h-3z"/><path fill="#{$border}" d="M24 9h3v3h-3z"/><path fill="#{$bg}" d="M27 9h3v3h-3z"/><path fill="#{$highlight}" d="M21 12h3v3h-3z"/><path fill="#{$border}" d="M24 12h3v3h-3z"/><path fill="#{$bg}" d="M27 12h3v3h-3z"/><path fill="#{$highlight}" d="M24 15h3v3h-3z"/><path fill="#{$border}" d="M27 15h3v3h-3z"/><path fill="#{$highlight}" d="M24 18h3v3h-3z"/><path fill="#{$border}" d="M27 18h3v3h-3z"/><path fill="#{$inset}" d="M24 21h3v3h-3z"/><path fill="#{$border}" d="M27 21h3v3h-3z"/><path fill="#{$inset}" d="M24 24h3v3h-3z"/><path fill="#{$border}" d="M27 24h3v3h-3z"/><path fill="#{$inset}" d="M24 27h3v3h-3z"/><path fill="#{$border}" d="M27 27h3v3h-3z"/></svg>');
	$bottom-right: functions.svg-encode('<svg #{$svg-xlmns} #{$svg-viewbox} #{$svg-shape}><path fill="#{$inset}" d="M24 0h3v3h-3z"/><path fill="#{$border}" d="M27 0h3v3h-3z"/><path fill="#{$inset}" d="M24 3h3v3h-3z"/><path fill="#{$border}" d="M27 3h3v3h-3z"/><path fill="#{$inset}" d="M24 6h3v3h-3z"/><path fill="#{$border}" d="M27 6h3v3h-3z"/><path fill="#{$inset}" d="M24 9h3v3h-3z"/><path fill="#{$border}" d="M27 9h3v3h-3z"/><path fill="#{$inset}" d="M24 12h3v3h-3z"/><path fill="#{$border}" d="M27 12h3v3h-3z"/><path fill="#{$inset}" d="M21 15h3v3h-3z"/><path fill="#{$border}" d="M24 15h3v3h-3z"/><path fill="#{$bg}" d="M27 15h3v3h-3z"/><path fill="#{$inset}" d="M21 18h3v3h-3z"/><path fill="#{$border}" d="M24 18h3v3h-3z"/><path fill="#{$bg}" d="M27 18h3v3h-3z"/><path fill="#{$inset}" d="M15 21h3v3h-3zM18 21h3v3h-3z"/><path fill="#{$border}" d="M21 21h3v3h-3z"/><path fill="#{$bg}" d="M24 21h3v3h-3zM27 21h3v3h-3z"/><path fill="#{$inset}" d="M0 24h3v3H0zM3 24h3v3H3zM6 24h3v3H6zM9 24h3v3H9zM12 24h3v3h-3z"/><path fill="#{$border}" d="M15 24h3v3h-3zM18 24h3v3h-3z"/><path fill="#{$bg}" d="M21 24h3v3h-3zM24 24h3v3h-3zM27 24h3v3h-3z"/><path fill="#{$border}" d="M0 27h3v3H0zM3 27h3v3H3zM6 27h3v3H6zM9 27h3v3H9zM12 27h3v3h-3z"/><path fill="#{$bg}" d="M15 27h3v3h-3zM18 27h3v3h-3zM21 27h3v3h-3zM24 27h3v3h-3zM27 27h3v3h-3z"/></svg>');
	$bottom-left: functions.svg-encode('<svg #{$svg-xlmns} #{$svg-viewbox} #{$svg-shape}><path fill="#{$border}" d="M0 0h3v3H0z"/><path fill="#{$highlight}" d="M3 0h3v3H3z"/><path fill="#{$border}" d="M0 3h3v3H0z"/><path fill="#{$highlight}" d="M3 3h3v3H3z"/><path fill="#{$border}" d="M0 6h3v3H0z"/><path fill="#{$highlight}" d="M3 6h3v3H3z"/><path fill="#{$border}" d="M0 9h3v3H0z"/><path fill="#{$inset}" d="M3 9h3v3H3z"/><path fill="#{$border}" d="M0 12h3v3H0z"/><path fill="#{$inset}" d="M3 12h3v3H3z"/><path fill="#{$bg}" d="M0 15h3v3H0z"/><path fill="#{$border}" d="M3 15h3v3H3z"/><path fill="#{$inset}" d="M6 15h3v3H6z"/><path fill="#{$bg}" d="M0 18h3v3H0z"/><path fill="#{$border}" d="M3 18h3v3H3z"/><path fill="#{$inset}" d="M6 18h3v3H6z"/><path fill="#{$bg}" d="M0 21h3v3H0zM3 21h3v3H3z"/><path fill="#{$border}" d="M6 21h3v3H6z"/><path fill="#{$inset}" d="M9 21h3v3H9zM12 21h3v3h-3z"/><path fill="#{$bg}" d="M0 24h3v3H0zM3 24h3v3H3zM6 24h3v3H6z"/><path fill="#{$border}" d="M9 24h3v3H9zM12 24h3v3h-3z"/><path fill="#{$inset}" d="M15 24h3v3h-3zM18 24h3v3h-3zM21 24h3v3h-3zM24 24h3v3h-3zM27 24h3v3h-3z"/><path fill="#{$bg}" d="M0 27h3v3H0zM3 27h3v3H3zM6 27h3v3H6zM9 27h3v3H9zM12 27h3v3h-3z"/><path fill="#{$border}" d="M15 27h3v3h-3zM18 27h3v3h-3zM21 27h3v3h-3zM24 27h3v3h-3zM27 27h3v3h-3z"/></svg>');

	// Style rules for pixel border
	position: relative;
	&:before, &:after {
		content : '';
		display: block;
		@include position-fill;
	}
	&:before {
		background-image: $top-left, $top-right, $bottom-right, $bottom-left;
		background-repeat: no-repeat;
		background-position: 0 0, right 0, right bottom, 0 bottom;
		background-size: calc($width * 10) auto;
		z-index: 2;
	}
	&:after {
		border: $width solid $border;
		box-shadow: inset -#{$width} 0 0 0 $inset, inset $width 0 0 0 $highlight, inset 0 -#{$width} 0 0 $inset, inset 0 $width 0 0 $highlight;
	}
}

// Placeholder
// examples: @include placeholder {}, :focus{@include placeholder {}}, or input {@include placeholder {}}
@mixin placeholder {
	&::-webkit-input-placeholder {@content}
	&::-ms-input-placeholder {@content}
	&::placeholder {@content}
}

// Mixin for positioning
@mixin position($type: '', $top: '', $bottom: '', $left: '', $right: '', $z: '') {
	@if ($type != '') {
		position: $type;
	}
	@if ($top != '') {
		top: $top;
	}
	@if ($bottom != '') {
		bottom: $bottom;
	}
	@if ($left != '') {
		left: $left;
	}
	@if ($right != '') {
		right: $right;
	}
	@if ($z != '') {
		z-index: $z;
	}
}

// Absolute positioning to fill area
@mixin position-fill($margin: '', $z: '') {
	$var-margin: if($margin != '', $margin, auto);
	@include position($type: absolute, $top: 0, $bottom: 0, $right: 0, $left: 0, $z: $z);
	margin: $var-margin;
}

// Responsive px breakpoint, pass in a pixel value
@mixin respond($breakpoint) {
	@if index('px' 'cm' 'mm' 'in' 'pt' 'pc' 'dpi' 'dpcm' 'dppx' 'em' 'ex' 'rem' '%' 'vw' 'vh' 'vmin' 'vmax', unit($breakpoint)) == null {
		$breakpoint: $breakpoint + 'px';
	}
	@media only screen and (max-width: $breakpoint) {
		@content;
	}
}

// Responsive px breakpoint, pass in a pixel value
@mixin respond-min($breakpoint) {
	@if index('px' 'cm' 'mm' 'in' 'pt' 'pc' 'dpi' 'dpcm' 'dppx' 'em' 'ex' 'rem' '%' 'vw' 'vh' 'vmin' 'vmax', unit($breakpoint)) == null {
		$breakpoint: $breakpoint + 'px';
	}
	@media only screen and (min-width: $breakpoint) {
		@content;
	}
}

// Scrollbar
@mixin scrollbar($selector, $width, $s-color-01: '', $s-color-02: '') {
	#{$selector}::-webkit-scrollbar {
		width: $width;
	}
	@if $s-color-01 != '' {
		#{$selector}::-webkit-scrollbar-track {
			background: $s-color-01;
		}
	}
	@if $s-color-02 != '' {
		#{$selector}::-webkit-scrollbar-thumb {
			background: $s-color-02;
		}
	}
}

// Quick width and height sizing
@mixin sizing($width, $height) {
	width: $width;
	height: $height;
}

// Screen reader only (hides elements)
@mixin sr-only {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	-webkit-clip: rect(0, 0, 0, 0);
	-ms-clip: rect(0, 0, 0, 0);
	clip: rect(0, 0, 0, 0);
}

// Underline styles
@mixin text-decoration($thickness: 2px, $offset: 2px, $color: inherit) {
	text-decoration: underline;
	-webkit-text-decoration-color: $color;
	-moz-text-decoration-color: $color;
	text-decoration-color: $color;
	-webkit-text-decoration-thickness: $thickness;
	-moz-text-decoration-thickness: $thickness;
	text-decoration-thickness: $thickness;
	text-underline-offset: $offset;
}

// For hiding / showing content
@mixin toggle-content($state, $transition: '') {
	@if $state == collapsed {
		opacity: 0;
		visibility: hidden;
		@include transform(scaleY(0));
	}
	@if $state == expanded {
		visibility: visible;
		opacity: 1;
		@include transform(scaleY(1));
		transform-origin: top; 
	}
	@if ($transition == true) {
		$transform-props: transform 0.5s ease-in-out, opacity 0.5s ease-in-out;
		@include transition($transform-props);
	}
}

// Transform
@mixin transform($value) {
	-webkit-transform: $value;
	-o-transform: $value;
	-ms-transform: $value;
	-moz-transform: $value;
	transform: $value;
}

// Transition
@mixin transition($value) {
	-webkit-transition: $value;
	-o-transition: $value;
	-ms-transition: $value;
	-moz-transition: $value;
	transition: $value;
}